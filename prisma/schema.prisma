// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator enums {
  provider = "tsx ./prisma/enum-generator"
}

datasource db {
  provider = "cockroachdb"
  url      = env("NUXT_DATABASE_URL")
}

model VerificationToken {
  identifier String   @id
  token      String
  attempts   Int      @default(0)
  expires    DateTime
}

model User {
  id    String @id @default(cuid())
  email String @unique
  name  String

  admin Boolean

  points                 Int      @default(0)
  pointsAwardedCount     Int      @default(0)
  pointsAwardedResetTime DateTime @default(now())

  institutionRole InstitutionRole?

  institutionId String?
  institution   Institution? @relation(fields: [institutionId], references: [id])

  groups             GroupUsers[]
  posts              ForumPost[]
  reactions          ForumPostReaction[]
  deadlinesAuthored  Deadline[]               @relation("DeadlinesAuthored")
  deadlinesUpvoted   Deadline[]               @relation("DeadlinesUpvoted")
  deadlinesCompleted UserCompletedDeadlines[]
  quizzes            Quiz[]
  quizAttempts       Attempt[]
  quizAnswers        Answer[]
  redemptions        Redemption[]
  forumPostReports   ForumPostReport[]
}

// ===========
// Institution
// ===========

enum InstitutionRole {
  Admin
  Educator
  Member
}

model Institution {
  id   String @id @default(cuid())
  name String

  groups   Group[]
  users    User[]
  vouchers Voucher[]
  invites  InstitutionInvite[]
}

// ======
// Prizes
// ======
// 
// In retrospect, it probably would've been a good idea to use delegated types as well.
// Oh well, too late

model Voucher {
  id String @id @default(cuid())

  name           String
  description    String
  pointsRequired Int    @default(0)

  institutionId String
  institution   Institution  @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  redemptions   Redemption[]
}

model Redemption {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  claimed   Boolean  @default(false)

  voucherId String
  voucher   Voucher @relation(fields: [voucherId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ============
// Invite links
// ============

model InstitutionInvite {
  id String @id @default(cuid())

  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  role InstitutionRole
}

// ======
// Groups
// ======

enum GroupRole {
  Owner
  Educator
  Member
}

model Group {
  id          String @id @default(cuid())
  name        String
  description String

  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  users     GroupUsers[]
  forums    Forum[]
  deadlines Deadline[]
  events    Event[]
  invites   GroupInvite[]
  quizzes   Quiz[]
}

model GroupUsers {
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  role GroupRole

  @@unique([groupId, userId])
}

// ======
// Forums
// ======

model Forum {
  id          String @id @default(cuid())
  name        String
  description String

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  posts ForumPost[]
}

model ForumPost {
  id String @id @default(cuid())

  title       String
  richContent String
  timestamp   DateTime @default(now())

  // Optional relation in the event user is deleted
  authorId String?
  author   User?   @relation(fields: [authorId], references: [id])

  forumId String
  forum   Forum  @relation(fields: [forumId], references: [id], onDelete: Cascade)

  parentId String?
  parent   ForumPost?  @relation("ParentChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children ForumPost[] @relation("ParentChildren")

  reactions   ForumPostReaction[]
  attachments ForumPostAttachment[]
  reports     ForumPostReport[]
}

model ForumPostReport {
  id String @id @default(cuid())

  reason    String
  timestamp DateTime @default(now())

  postId String
  post   ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  reporterId String
  reporter   User   @relation(fields: [reporterId], references: [id], onDelete: Cascade)
}

model ForumPostAttachment {
  id String @id @default(cuid())

  // There is no guarantee that the forum post will exist
  // Files are essentially kept forever, even when forum post is deleted
  forumPostId String?
  forumPost   ForumPost? @relation(fields: [forumPostId], references: [id])

  url         String
  displayName String? // Optional display name of the file
}

model ForumPostReaction {
  id String @id @default(cuid())

  postId String
  post   ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  emoji String

  @@unique([postId, userId])
}

// =========
// Deadlines
// =========

model Deadline {
  id      String    @id @default(cuid())
  name    String
  dueDate DateTime?

  // Optional reference in the event user is deleted
  authorId String?
  author   User?   @relation("DeadlinesAuthored", fields: [authorId], references: [id])
  groupId  String
  group    Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  upvotes        User[]                   @relation("DeadlinesUpvoted")
  completedUsers UserCompletedDeadlines[]
}

model UserCompletedDeadlines {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())

  deadlineId String
  deadline   Deadline @relation(fields: [deadlineId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([deadlineId, userId])
}

// ======
// Events
// ======

model Event {
  id        String   @id @default(cuid())
  name      String
  startTime DateTime
  endTime   DateTime
  allDay    Boolean  @default(false) // Ignore time in startTime and endTime if this is true
  location  String?
  rrule     String?

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

// =======
// Quizzes
// =======

model Quiz {
  id          String @id @default(cuid())
  name        String
  description String

  questionOrder String[] // id of questions, questions will only show if it is in this array

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  groupId  String
  group    Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  attempts  Attempt[]
  questions Question[]
}

enum QuestionType {
  File
  Text
  Options
}

// Delegated type: https://github.com/prisma/prisma-examples/blob/latest/data-modeling/delegated-types/prisma/seed.ts
model Question {
  id String @id @default(cuid())

  content     String
  description String
  points      Int

  type QuestionType

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  answers Answer[]
}

model FileQuestion {
  id String @id @default(cuid())
}

model TextQuestion {
  id     String  @id @default(cuid())
  answer String?
}

model OptionsQuestion {
  id String @id @default(cuid())

  options        String[]
  correctOptions Int[]
}

model Attempt {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  answers Answer[]
}

// Another delegated type: https://github.com/prisma/prisma-examples/blob/latest/data-modeling/delegated-types/prisma/seed.ts
model Answer {
  id String @id @default(cuid())

  attemptId String
  attempt   Attempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model FileAnswer {
  id      String @id @default(cuid())
  fileUrl String
}

model TextAnswer {
  id     String @id @default(cuid())
  answer String
}

model OptionsAnswer {
  id      String @id @default(cuid())
  options Int[]
}

// =============
// Group invites
// =============

model GroupInvite {
  id String @id @default(cuid())

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  role GroupRole
}
