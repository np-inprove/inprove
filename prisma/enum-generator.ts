// Copied from https://github.com/calcom/cal.com/blob/06bc5facf3958d11eb511b26153a250935f86654/packages/prisma/enum-generator.ts
// Props to cal.com for this solution! Thanks (:

import fs from 'node:fs/promises'
import path from 'node:path'
import { generatorHandler } from '@prisma/generator-helper'

const header = '// This file was generated by a custom prisma generator, do not edit manually.\n\n'

generatorHandler({
  onManifest() {
    return {
      defaultOutput: '../shared/enums.ts',
      prettyName: 'Prisma Enum Generator',
    }
  },
  async onGenerate(options) {
    const enums = options.dmmf.datamodel.enums

    const output = enums.map((e) => {
      let enumString = `export const ${e.name} = {\n`
      e.values.forEach(({ name: value }) => {
        enumString += `  ${value}: '${value}',\n`
      })
      enumString += '} as const\n\n'
      enumString += '// eslint-disable-next-line @typescript-eslint/no-redeclare -- intentionally naming the variable the same as the type\n'
      enumString += `export type ${e.name} = (typeof ${e.name})[keyof typeof ${e.name}]\n`

      return enumString
    })

    const outputFile = options.generator.output
    if (!outputFile || !outputFile.value)
      throw new Error('No output file specified')

    const outputPath = path.resolve(outputFile.value)
    await fs.mkdir(path.dirname(outputPath), { recursive: true })
    await fs.writeFile(outputPath, header + output.join('\n'), 'utf-8')
  },
})
